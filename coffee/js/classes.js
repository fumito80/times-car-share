// Generated by CoffeeScript 1.12.7

/* const */

(function() {
  var ControllerBase, ControllerMapBase, MarkerBaseView, RequestDataView, SortableStationBaseView, StationBaseView, StationModel, StationSetBaseView, StationSetMapBaseView, WindowView, car_color_classes,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  car_color_classes = {
    "ホワイト": "car_white",
    "グリーン": "car_green",
    "レッド": "car_red",
    "ブルー": "car_blue",
    "シルバー": "car_silver",
    "グレー": "car_gray",
    "オレンジ": "car_orange",
    "ライトブルー": "car_lightblue",
    "ブラウン": "car_brown",
    "オレンジ": "car_orange",
    "ワインレッド": "car_winered",
    "スモーキーグリーン": "car_smokygreen",
    "パープル": "car_purple",
    "ライムグリーン": "car_limegreen"
  };


  /* end const */

  window.tp = chrome.extension.getBackgroundPage().window.tp;

  tp.PlainModel = Backbone.Model.extend({});

  StationModel = Backbone.Model.extend({
    idAttribute: "scd"
  });


  /* StationModel description
    scd:        ステーションID（Model id）
    name:       ステーション名
    alias:      ステーション設定値
    distanceS:  直線距離m
    distanceW:  徒歩距離m
    selected:   選択ステーション
    disabled:   非表示フラグ
    latlng:     緯度経度 Google maps object
    ordernum:   表示順Number
    contents:   タイムテーブル生HTML
    formdata:   フォームデータ
    route:      地図ルート Google maps direction object
    deferred:   jQuery Deferred object
   */

  tp.StationCollection = Backbone.Collection.extend({
    model: StationModel
  });

  StationBaseView = Backbone.View.extend({
    events: {
      "click button.reserv": "onClickReserve",
      "click i.icon-remove": "onClickDelStation"
    },
    initialize: function(options) {
      return this.model.on({
        "change:deferred": this.renderLoading,
        "change:contents": this.renderContents,
        "change:alias": this.renderAlias,
        "change:error": this.renderError,
        "remove": this.onRemove
      }, this);
    },
    render: function() {
      this.setElement(this.templateFrame(this.model.toJSON()));
      return this;
    },

    /* on Model event */
    renderLoading: function() {
      if (this.model.get("deferred").state() === "pending") {
        if (this.$el.find("img").show().length === 0) {
          this.$el.find("button").remove();
          this.$el.find("table").remove();
          return this.$el.find("div:first").append('<img src="images/loading2.gif" class="loading">');
        }
      }
    },
    renderContents: function() {
      this.$("table").remove();
      $.each($(this.model.get("contents")), (function(_this) {
        return function(i, html) {
          return _this.$el.find("div:first").append(_this.templateContent($(html)));
        };
      })(this));
      return this.model.unset("contents", {
        silent: true
      });
    },
    renderAlias: function() {
      return this.$("span.alias").text(this.model.get("alias"));
    },
    renderError: function() {
      return this.$el.find("div:first").append('<div class="errmsg">' + this.model.get("error") + '</div>').find("img").remove();
    },
    onRemove: function() {
      this.model.collection.off(null, null, this);
      this.model.off(null, null, null);
      this.off(null, null, null);
      return this.remove();
    },

    /* on DOM event */
    onClickReserve: function(event) {
      return this.model.trigger("requestReservePage", $(event.currentTarget).parents("table").attr("id"));
    },
    onClickDelStation: function(event) {
      var collection, container;
      collection = this.model.collection;
      this.$el.parent().remove();
      collection.trigger("requestStartTrigger", container = {});
      container.dfdWaitSearch.done(function() {
        return collection.trigger("enableNextSta", true);
      });
      collection.trigger("hideRoute", this.model.get("route"));
      collection.remove(this.model);
      return event.stopPropagation();
    },

    /* instance method/property */
    templateContent: function(car$) {
      var carId, car_color_class, color_name_jp, templCar, timetable;
      carId = car$[0].id;
      color_name_jp = car$.data("color");
      car_color_class = car_color_classes[color_name_jp];
      timetable = car$.find("table.time");
      if (!car_color_class) {
        car_color_class = "car_fumei";
      }
      templCar = "<div class=\"panelCarname\">\n  <div class=\"caricon " + car_color_class + "\"></div>\n  <div class=\"carname\" title=\"" + color_name_jp + "\">" + (car$.find("p.carname").text()) + "</div>\n  <button class=\"reserv small square\" style=\"float:left\">予約</button>\n  <div class=\"iconbutton\">詳細<i class=\"icon-caret-down\"></i></div>\n  <div style=\"clear:both\"></div>\n</div>";
      timetable.attr("id", carId).prepend("<caption></caption>").removeClass("time").addClass("timetable").find("caption").append($(templCar)).end().find("tr:has(th)").addClass("detail").hide().end().find("td").removeAttr("width");
      return timetable;
    },
    templateFrame: _.template("<div id=\"<%= scd %>\" class=\"station\">\n  <div class=\"stationBorder\">\n    <span class=\"ordernum\"></span>\n    <span class=\"alias\" title=\"<%= name %>\"><%= alias %></span>\n    <img src=\"images/loading2.gif\" class=\"loading\" style=\"display:none\">\n    <i class=\"icon-remove\" title=\"削除\"></i>\n    <div class=\"distance straight\"></div>\n    <div class=\"distance str s2\"></div>\n    <div class=\"distance walk\"></div>\n    <div class=\"distance str s1\"></div>\n  </div>\n</div>")
  });

  tp.StationNomapView = (function(superClass) {
    extend(StationNomapView, superClass);

    function StationNomapView(options) {
      StationNomapView.__super__.constructor.call(this, options);
    }

    StationNomapView.prototype.events = _.extend({
      "click button.mapDetail": "onClickMapDetail"
    }, StationBaseView.prototype.events);


    /* on Model event */

    StationNomapView.prototype.renderContents = function() {
      StationNomapView.__super__.renderContents.call(this);
      this.$el.css({
        "padding": "15px"
      });
      this.$("img").replaceWith($("<button />", {
        "class": "mapDetail small",
        text: "地図"
      }));
      this.$("div.iconbutton").hide();
      this.$("div.ui-icon-close").show();
      this.$("table").find("tr:has(th)").show();
      return this.model.get("deferred").resolve();
    };


    /* on DOM event */

    StationNomapView.prototype.onClickMapDetail = function() {
      return window.open("https://share.timescar.jp/view/station/detail.jsp?scd=" + this.model.id);
    };

    return StationNomapView;

  })(StationBaseView);

  SortableStationBaseView = (function(superClass) {
    extend(SortableStationBaseView, superClass);

    function SortableStationBaseView(options) {
      SortableStationBaseView.__super__.constructor.call(this, options);
      this.model.on({
        "change:route": this.renderDistanceW,
        "change:distanceS": this.renderDistanceS,
        "change:ordernum": this.renderOrderNum
      }, this);
      this.model.collection.on({
        "selectStation": this.onSelectStation,
        "hoverStation": this.onHoverStation
      }, this);
    }


    /* instance method/property */

    SortableStationBaseView.prototype.events = _.extend({
      "click": "onClickStation",
      "mouseenter": "onMouseenterStation",
      "mouseleave": "onMouseleaveStation",
      "click .iconbutton": "onClickDetail",
      "mouseenter .iconbutton": "onMouseenterDetail",
      "mouseleave .iconbutton": "onMouseleaveDetail"
    }, StationBaseView.prototype.events);

    SortableStationBaseView.prototype.formatDistance = function(num) {
      var result;
      if (num > 999) {
        result = (Math.round(num / 10) / 100).toString().replace(/^(-?\d+)(\d{3})/, "$1,$2");
        return "<span class=\"number\">" + result + "km</span>";
      } else {
        return "<span class=\"number\">" + num + "m</span>";
      }
    };


    /* on Model event */

    SortableStationBaseView.prototype.renderContents = function() {
      SortableStationBaseView.__super__.renderContents.call(this);
      return this.$el.find("img").remove().end().find("div.ui-icon-close").show();
    };

    SortableStationBaseView.prototype.renderDistanceS = function() {
      if (this.model.has("distanceS")) {
        this.$("div.straight").html(this.formatDistance(this.model.get("distanceS")));
        this.$(".distance.s1").text("");
        return this.$(".distance.s2").text("");
      } else {
        this.$("div.straight").text("");
        this.$(".distance.s1").text("徒歩:");
        return this.$(".distance.s2").text("/");
      }
    };

    SortableStationBaseView.prototype.renderDistanceW = function() {
      if (this.model.has("route")) {
        this.$("div.straight").html(this.formatDistance(this.model.get("distanceS")));
        this.$("div.walk").html(this.formatDistance(this.model.get("distanceW")));
        this.$(".distance.s1").text("徒歩:");
        return this.$(".distance.s2").text("/");
      } else {
        this.$("div.walk").text("");
        this.$("div.straight").text("");
        this.$(".distance.s1").text("");
        return this.$(".distance.s2").text("");
      }
    };

    SortableStationBaseView.prototype.renderOrderNum = function() {
      var ordernum;
      if (this.model.get("distanceS")) {
        ordernum = this.model.get("ordernum");
      } else {
        ordernum = 0;
      }
      this.$("span.ordernum").text(ordernum);
      this.$el.parent().parent().children().eq(ordernum).append(this.$el);
      if (this.$el.parent().hasClass("hide")) {
        return this.model.set({
          disabled: true
        });
      } else {
        return this.model.set({
          disabled: false
        });
      }
    };


    /* on Collection event */

    SortableStationBaseView.prototype.onSelectStation = function(id, whichSelect) {
      if (id === this.model.id) {
        this.$el.addClass("hilite");
        if (whichSelect === "marker") {
          return this.$el.scrollintoview(50);
        }
      } else {
        return this.$el.removeClass("hilite");
      }
    };

    SortableStationBaseView.prototype.onHoverStation = function(hovered, id, whichSelect) {
      if (id === this.model.id) {
        if (hovered) {
          this.$el.addClass("hover");
        } else {
          this.$el.removeClass("hover");
        }
        if (whichSelect === "marker") {
          return this.$el.scrollintoview(50);
        }
      } else {
        return this.$el.removeClass("hover");
      }
    };


    /* on DOM event */

    SortableStationBaseView.prototype.onClickStation = function(event) {
      return this.model.collection.trigger("selectStation", this.model.id, "listItem");
    };

    SortableStationBaseView.prototype.onMouseenterStation = function() {
      return this.model.collection.trigger("hoverStation", true, this.model.id, "listItem");
    };

    SortableStationBaseView.prototype.onMouseleaveStation = function() {
      return this.model.collection.trigger("hoverStation", false, this.model.id, "listItem");
    };

    SortableStationBaseView.prototype.onClickDetail = function(event) {
      return $(event.currentTarget).parents("table:first").find("tr:has(th)").slideToggle();
    };

    SortableStationBaseView.prototype.onMouseenterDetail = function(event) {
      if ($(event.currentTarget).hasClass("iconbutton")) {
        return $(event.currentTarget).addClass("detailActive").find("span").addClass("uiIconActive");
      }
    };

    SortableStationBaseView.prototype.onMouseleaveDetail = function(event) {
      if ($(event.currentTarget).hasClass("iconbutton")) {
        return $(event.currentTarget).removeClass("detailActive").find("span").removeClass("uiIconActive");
      }
    };

    SortableStationBaseView.prototype.onClickDelStation = function(event) {
      var collection;
      collection = this.model.collection;
      SortableStationBaseView.__super__.onClickDelStation.call(this, event);
      return collection.trigger("doneRenderDistance");
    };

    return SortableStationBaseView;

  })(StationBaseView);

  tp.SortableStationView = (function(superClass) {
    extend(SortableStationView, superClass);

    function SortableStationView() {
      return SortableStationView.__super__.constructor.apply(this, arguments);
    }

    SortableStationView.prototype.renderContents = function() {
      SortableStationView.__super__.renderContents.call(this);
      return this.model.get("deferred").resolve();
    };

    return SortableStationView;

  })(SortableStationBaseView);

  tp.SortableRouteStationView = (function(superClass) {
    extend(SortableRouteStationView, superClass);

    function SortableRouteStationView() {
      return SortableRouteStationView.__super__.constructor.apply(this, arguments);
    }

    SortableRouteStationView.prototype.renderDistanceW = function() {
      SortableRouteStationView.__super__.renderDistanceW.call(this);
      return this.model.get("deferred").resolve();
    };

    return SortableRouteStationView;

  })(SortableStationBaseView);

  RequestDataView = Backbone.View.extend({
    url: "https://share.timescar.jp/view/reserve/input.jsp",
    initialize: function(options) {
      this.id = this.model.id;
      return this.model.on({
        "requestReservePage": this.onRequestReservePage,
        "change:timetables": this.onChangeTimetables,
        "remove": this.onRemove
      }, this);
    },

    /* on Model event */
    onRemove: function() {
      this.model.collection.off(null, null, this);
      this.model.off(null, null, null);
      this.off(null, null, null);
      return this.remove();
    },
    onRequestReservePage: function(carId) {
      var formTemplate, sdate;
      sdate = ~~$("#selectDate").val().replace(/-/g, "").substring(0, 8);
      sdate = sdate * 10000 + ~~$("#selectHour").val() * 100;
      formTemplate = "<form method=\"GET\" action=\"" + this.url + "\" target=\"_blank\">\n  <input type=\"hidden\" name=\"scd\" value=\"" + this.model.id + "\">\n  <input type=\"hidden\" name=\"carId\" value=\"" + carId + "\">\n  <input type=\"hidden\" name=\"sdate\" value=\"" + sdate + "\">\n  <input type=\"hidden\" name=\"edate\" value=\"" + sdate + "\">\n</form>";
      return $(formTemplate).appendTo($("#form").empty()).submit();
    },
    onChangeTimetables: function() {
      var stationInfo;
      stationInfo = this.model.get("stationInfo");
      if (stationInfo) {
        return this.updateContents(stationInfo);
      } else {
        return this.doAjaxLoad();
      }
    },

    /* instance method/property */
    updateContents: function(stationInfo) {
      var contents;
      contents = [];
      $.each(this.model.get("timetables"), (function(_this) {
        return function(scd, div) {
          var cardesc, m, target;
          cardesc = stationInfo.cardesc[div[0].id];
          if (!cardesc || Object.keys(cardesc).length === 0) {
            return;
          }
          target = div.find("table tr:first");
          if (target.length === 0) {
            return;
          }
          div[0].dataset.color = "ホワイト";
          m = {};
          m.carname = cardesc[0], m.clas = cardesc[1], m.capa = cardesc[2], m.color = cardesc[3], m.limit = cardesc[4], m.charge = cardesc[5], m.maxcharge = cardesc[6], m.tpnavi = cardesc[7], m.navimodel = cardesc[8], m.note = cardesc[9];
          return contents.push(div.find("table tr:first").before(_this.template(m)).end()[0].outerHTML);
        };
      })(this));
      this.model.set({
        contents: contents
      });
      return this.model.unset("timetables", {
        silent: true
      });
    },
    doAjaxLoad: function() {
      return $.ajax({
        type: "GET",
        url: this.url + ("?scd=" + this.id)
      }).done((function(_this) {
        return function(resp) {
          var resp$, stationInfo, stationName, timetables;
          if (/<input type='hidden' name='te-conditions' value='.*' \/>/.test(resp)) {
            resp$ = $(resp);
            stationName = resp$.find("span[id='stationNm']").text();
            timetables = resp$.find("span[id=\"timetableHtmlTag\"]").children();
            stationInfo = _this.updateLocalDB(stationName, timetables);
            return _this.updateContents(stationInfo);
          } else {
            tp.alert("データを取得できませんでした。<br><br>タイムアウトの可能性があります。<br>" + "マイページトップを再読み込みしてください。");
            return _this.model.set({
              error: "Error: タイムアウトが発生しました。"
            });
          }
        };
      })(this)).fail((function(_this) {
        return function() {
          tp.alert("データを取得できませんでした。<br><br>" + "ログインされていない可能性があります。");
          return _this.model.set({
            error: "Error: ログインされていない可能性があります。"
          });
        };
      })(this));
    },
    updateLocalDB: function(stationName, timetables) {
      var alias, name, stationInfo;
      stationInfo = {};
      name = this.model.get("name");
      if (/^Station\s\d+$/.test(name)) {
        this.model.set({
          name: stationName,
          alias: stationName
        });
      } else {
        stationName = name;
        if (!(stationName === (alias = this.model.get("alias")))) {
          stationInfo.alias = alias;
        }
      }
      stationInfo.name = stationName;
      stationInfo.latlng = this.model.get("latlng");
      stationInfo.cardesc = {};
      $.each(timetables, function(i, elem) {
        var car$, cardesc, carname;
        car$ = $(elem);
        car$.find("table.time").find("tr:not(:has(th))").remove();
        carname = car$.find("p").find("span").remove().end().text();
        cardesc = [carname];
        $.each(car$.find("td"), function(i, elem) {
          return cardesc.push($(elem).text());
        });
        return stationInfo.cardesc[elem.id] = cardesc;
      });
      this.model.set({
        stationInfo: stationInfo
      });
      this.model.collection.trigger("updateLocalDB", this.id, stationInfo);
      return stationInfo;
    },
    template: _.template("<tr class=\"detail\">\n  <th colspan=\"10\">クラス</th>\n  <td colspan=\"14\"><%= clas %></td>\n  <th colspan=\"10\">定員</th>\n  <td colspan=\"14\"><%= capa %></td>\n</tr>\n<tr class=\"detail\">\n  <th colspan=\"10\">駆動</th>\n  <td colspan=\"14\"><%= color %></td>\n  <th colspan=\"10\">現在の燃料残目安</th>\n  <td colspan=\"14\"><%= limit %></td>\n</tr>\n<tr class=\"detail\">\n  <th colspan=\"10\">安全装備</th>\n  <td colspan=\"38\"><%= charge %></td>\n</tr>\n<tr class=\"detail\">\n  <th colspan=\"10\">備考</th>\n  <td colspan=\"38\"><%= note %></td>\n</tr>")
  });

  StationSetBaseView = Backbone.View.extend({
    el: "#stations_block",
    initialize: function(options) {
      this.model.on({
        "change:selectDate": "onChangeSelectDate",
        "change:selectHour": "onChangeSelectDate"
      }, this);
      this.collection.on({
        "add": this.onAddRender,
        "updateLocalDB": this.onUpdateLocalDB
      }, this);
      return tp.atwith(tp.activity.misc, this);
    },
    events: {
      "click button.newtimetable": "onClickReload",
      "change #selectDate,#selectHour": "onChangeDomSelectDate"
    },
    render: function() {
      var container;
      this.$el.append(this.template);
      this.trigger("getSelectDateHour", container = {});
      this.$("#selectDate").html(container.selectDate.html()).change();
      this.$("#selectHour").html(container.selectHour.html()).val((new Date).getHours()).change();
      return this;
    },
    doTeedaAjax: function(options) {
      var allTargets, container, date, formData, hour, lat, latlng, lon, requestDateHour, sDate, startSearch;
      this.trigger("getCenterLatLng", container = {});
      if (!(latlng = container.latlng)) {
        return;
      }
      requestDateHour = this.model.get("selectDateHour");
      date = (requestDateHour != null ? requestDateHour.date : void 0) || "";
      hour = (requestDateHour != null ? requestDateHour.hour : void 0) || "";
      startSearch = "";
      if (requestDateHour) {
        startSearch = date.substring(0, 10).replace(/-0/g, "-") + " " + hour + ":00:00";
        sDate = "";
      } else {
        date = new Date();
        startSearch = [date.getFullYear(), date.getMonth() + 1, date.getDate()].join("-") + " " + date.getHours() + ":00:00";
        date.setMilliseconds(0);
        date.setSeconds(0);
        date.setMinutes(0);
        sDate = date.getTime();
      }
      if (!(options != null ? options.changeTimetable : void 0)) {
        this.collection.comparator = (function(_this) {
          return function(model) {
            return model.get("distanceS");
          };
        })(this);
        this.collection.sort({
          silent: true
        });
      }
      lon = Math.round(latlng.lng() * 10000000) / 10000000 - tp.ptAdjust;
      lat = Math.round(latlng.lat() * 1000000) / 1000000 - tp.ptAdjust;
      allTargets = [];
      $.each(this.collection.models, function(x, model) {
        if (model.get("deferred").state() === "pending") {
          latlng = model.get("latlng");
          return allTargets.push({
            scd: model.id,
            lon: Math.round(latlng.lng() * 10000000) / 10000000,
            lat: Math.round(latlng.lat() * 1000000) / 1000000
          });
        }
      });
      formData = {
        component: "station_stationMapPage",
        action: "ajaxCreateTimeTable",
        time: encodeURIComponent((new Date()).toString()),
        lonAjax: "",
        latAjax: "",
        stationCdAjax: "",
        centerLon: lon,
        centerLat: lat,
        startSearch: startSearch,
        dateSpace: date,
        hourSpace: hour,
        useHour: 0,
        useMinute: 0,
        sDate: sDate,
        eDate: sDate,
        mainteCard: false,
        method: "POST"
      };
      return this.doAjaxThing(formData, allTargets, options);
    },
    doAjaxThing: function(formData, allTargets, options) {
      var i, k, ref, ref1, targets;
      targets = [];
      if (allTargets.length > 0) {
        for (i = k = 1, ref = Math.min(5, allTargets.length); 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
          targets.push(allTargets.shift());
        }
        ref1 = [(_.pluck(targets, "scd")).join() + ",", (_.pluck(targets, "lon")).join() + ",", (_.pluck(targets, "lat")).join() + ","], formData.stationCdAjax = ref1[0], formData.lonAjax = ref1[1], formData.latAjax = ref1[2];
        return $.ajax({
          url: "https://share.timescar.jp/view/station/teeda.ajax",
          method: "POST",
          data: formData
        }).done((function(_this) {
          return function(resp) {
            _this.doneAjaxThing(resp, targets);
            return _this.doAjaxThing(formData, allTargets, options);
          };
        })(this));
      } else {
        if (options != null ? options.changeTimetable : void 0) {
          return $.each(this.collection.models, function(i, model) {
            var dfd;
            if ((dfd = model.get("deferred")).state() === "pending") {
              return dfd.resolve();
            }
          });
        }
      }
    },
    doneAjaxThing: function(resp, targets) {
      var container, timetablesSet;
      timetablesSet = {};
      $.each($("<div>").append($(resp)).find("div.tableoff"), function(i, elem) {
        var carname, scd, tagA, target;
        target = $(elem);
        scd = /openPop\('(.*)'\)/.exec((tagA = target.find("a")).attr("onclick"))[1];
        carname = tagA.text();
        target.find("p").empty().text(carname);
        return (timetablesSet[scd] || (timetablesSet[scd] = {}))[elem.id] = target;
      });
      this.trigger("getLocalDB", container = {});
      return $.each(targets, (function(_this) {
        return function(i, target) {
          var a, b, diff, stationInfo, timetables;
          timetables = timetablesSet[target.scd];
          stationInfo = container.localDB[target.scd];
          if (timetables && stationInfo) {
            a = _.keys(stationInfo.cardesc || {});
            b = _.keys(timetables);
            diff = _.difference(a, b).concat(_.difference(b, a));
            if (!(diff.length === 0)) {
              stationInfo = null;
            }
          }
          return _this.collection.get(target.scd).set({
            timetables: timetables || [],
            stationInfo: stationInfo
          });
        };
      })(this));
    },

    /* on Collection event */
    onAddRender: function(model, collection, options) {
      var stationView;
      stationView = new tp[this.options.stationViewClassName]({
        model: model
      });
      this.$("div.stations").append($("<div>").append(stationView.render().$el));
      return new RequestDataView({
        model: model
      });
    },
    onDoneReadyLoads: function(options) {
      this.$("div.divInputSelect").find("select,button,a").attr("disabled", "disabled");
      return this.doTeedaAjax(options);
    },
    onDoneLoads: function() {
      return this.$("div.divInputSelect").find("select,button:not(.nextsta)").removeAttr("disabled");
    },
    onUpdateLocalDB: function(scd, station) {
      return this.trigger("updateLocalDB", scd, station);
    },

    /* on DOM event */
    onClickReload: function() {
      this.trigger("setDirectionWaitIcon", true);
      return this.trigger("changeTimetable", {
        changeTimetable: true
      });
    },
    onChangeDomSelectDate: function(event) {
      return this.model.set({
        selectDateHour: {
          date: this.$("#selectDate").val(),
          hour: this.$("#selectHour").val()
        }
      });
    },
    onChangeSelectDate: function() {
      this.$("#selectDate").val(this.model.get("selectDate"));
      return this.$("#selectHour").val(this.model.get("selectHour"));
    },
    onClickSelectHour: function() {
      return this.$("#selectHour").toggle();
    },
    template: "<div class=\"divInputSelect\">\n  <select id=\"selectDate\"></select>\n  <select id=\"selectHour\"></select><button class=\"newtimetable small square\" disabled=\"disabled\" title=\"更新\"><i class=\"icon-repeat\"></i> 更新</button>\n</div>\n<div class=\"stations custom-scroll-bar\">\n</div>"
  });

  StationSetMapBaseView = (function(superClass) {
    extend(StationSetMapBaseView, superClass);

    function StationSetMapBaseView(options) {
      StationSetMapBaseView.__super__.constructor.call(this, options);
      this.collection.on({
        "hoverStation": this.onHoverStation
      }, this);
    }

    StationSetMapBaseView.prototype.events = _.extend({
      "mousedown div.vsplitbar": "onVsplitterMouseDown",
      "mouseup   div.vsplitbar": "onVsplitterMouseUp"
    }, StationSetBaseView.prototype.events);

    StationSetMapBaseView.prototype.render = function() {
      StationSetMapBaseView.__super__.render.call(this);
      $("<div class=\"vsplitbar\"></div>").insertBefore(this.$("div:first"));
      this.style = $("<style>", {
        type: "text/css"
      }).appendTo($("head"))[0].sheet;
      return this.$(".vsplitbar").draggable({
        axis: "x",
        cursor: "e-resize",
        start: this.onSplitStart.bind(this),
        drag: this.onSplitDrag.bind(this),
        stop: this.onSplitStop.bind(this)
      });
    };


    /* on DOM event */

    StationSetMapBaseView.prototype.onHoverStation = function(hovered, id, whitch) {
      var selectedModels;
      if (!hovered && whitch === "marker") {
        if ((selectedModels = this.collection.where({
          selected: true
        })).length > 0) {
          return this.collection.trigger("selectStation", selectedModels[0].id, "marker");
        }
      }
    };

    StationSetMapBaseView.prototype.onSplitStart = function(event, ui) {
      this.$el.removeAttr("style");
      return this.dragStartLeft = ui.position.left;
    };

    StationSetMapBaseView.prototype.onSplitDrag = function(event, ui) {
      var addEm, tmp;
      addEm = Math.round((this.dragStartLeft - ui.position.left) / 100) * 5 / 100;
      if (Math.abs(addEm) > 0) {
        tmp = Math.round((this.tdPaddingEm + addEm) * 100) / 100;
        if ((0.2 <= tmp && tmp <= 0.5)) {
          this.style.deleteRule(0);
          this.style.addRule(".timetable th,.timetable td", "padding:" + (this.tdPaddingEm = tmp) + "em");
          return this.dragStartLeft = ui.position.left;
        }
      }
    };

    StationSetMapBaseView.prototype.onSplitStop = function(event, ui) {
      this.$("div.vsplitbar").removeAttr("style");
      this.$el.width(this.$el.width());
      return this.trigger("doneDragSplitter");
    };

    StationSetMapBaseView.prototype.onVsplitterMouseDown = function() {
      return this.$("div.vsplitbar").addClass("drag");
    };

    StationSetMapBaseView.prototype.onVsplitterMouseUp = function() {
      return this.$("div.vsplitbar").removeClass("drag");
    };


    /* on Object event */

    StationSetMapBaseView.prototype.onSetStationWidth = function(container) {
      this.style.addRule(".timetable th,.timetable td", "padding:" + (this.tdPaddingEm = container.tdPaddingEm * 1) + "em");
      return this.$el.width(container.divStationsWidth);
    };

    StationSetMapBaseView.prototype.onGetStationWidth = function(container) {
      container.tdPaddingEm = Math.round(this.tdPaddingEm * 100) / 100;
      return container.divStationsWidth = this.$el.width();
    };

    return StationSetMapBaseView;

  })(StationSetBaseView);

  tp.StationSetNomapView = (function(superClass) {
    extend(StationSetNomapView, superClass);

    function StationSetNomapView(options) {
      StationSetNomapView.__super__.constructor.call(this, options);
      this.$el.addClass("nomap");
    }

    return StationSetNomapView;

  })(StationSetBaseView);

  tp.StationSetView = (function(superClass) {
    extend(StationSetView, superClass);

    function StationSetView() {
      return StationSetView.__super__.constructor.apply(this, arguments);
    }

    return StationSetView;

  })(StationSetMapBaseView);

  tp.SortableStationSetView = (function(superClass) {
    extend(SortableStationSetView, superClass);

    SortableStationSetView.prototype.events = _.extend({
      "click a.nextsta": "onClickNextSta"
    }, StationSetMapBaseView.prototype.events);

    SortableStationSetView.prototype.sortFieldName = "distanceS";

    function SortableStationSetView(options) {
      SortableStationSetView.__super__.constructor.call(this, options);
      this.collection.on({
        "sort": this.onSortRender,
        "doneRenderDistance": this.onDoneRenderDistance,
        "enableNextSta": this.enableNextSta
      }, this);
    }

    SortableStationSetView.prototype.render = function() {
      var i, k, ref;
      SortableStationSetView.__super__.render.call(this);
      this.$("div.divInputSelect").append("<a href=\"javascript:void(0)\" class=\"nextsta\" disabled=\"disabled\">次順追加<i class=\"icon-plus\"></i></a>");
      this.elHideStations = $("<div>", {
        "class": "hide"
      }).appendTo(this.$(".stations"));
      for (i = k = 0, ref = this.options.searchMargin; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        this.$(".stations").append($("<div>", {
          "class": "hide"
        }));
      }
      this.addDivs();
      return this;
    };

    SortableStationSetView.prototype.addDivs = function() {
      var addCount, i;
      addCount = i = Math.min(this.selectListMax, Math.max(0, this.dispMax - this.$(".stations > div:not(.hide)").length));
      while (i--) {
        this.elHideStations.after("<div/>");
      }
      return addCount;
    };

    SortableStationSetView.prototype.refreshDivs = function() {
      this.$(".stations > div:not(.hide)").remove();
      return this.addDivs();
    };

    SortableStationSetView.prototype.enableNextSta = function(force) {
      if (!(this.$(".stations > div:not(.hide)").length >= this.dispMax && !force)) {
        return this.$("div.divInputSelect a.nextsta").removeAttr("disabled");
      }
    };

    SortableStationSetView.prototype.onAddRender = function(model, collection, options) {
      var stationView;
      model.set({
        disabled: true
      });
      stationView = new tp[this.options.stationViewClassName]({
        model: model
      });
      this.elHideStations.append(stationView.render().$el);
      return new RequestDataView({
        model: model
      });
    };

    SortableStationSetView.prototype.onSortRender = function(collection, options) {
      var index;
      index = 1;
      return $.each(collection.models, (function(_this) {
        return function(i, model) {
          var distance, ordernum;
          distance = model.get(_this.sortFieldName);
          if (distance) {
            if ((_this.selectRangeFrom * 1000 <= distance && distance <= _this.selectRangeTo * 1000)) {
              ordernum = index++;
            } else {
              ordernum = 0;
            }
          } else {
            ordernum = 0;
          }
          model.set({
            ordernum: ordernum
          }, {
            silent: true
          });
          return model.trigger("change:ordernum");
        };
      })(this));
    };

    SortableStationSetView.prototype.onDoneRenderDistance = function() {
      this.collection.comparator = (function(_this) {
        return function(model) {
          return model.get(_this.sortFieldName);
        };
      })(this);
      return this.collection.sort();
    };

    SortableStationSetView.prototype.onDoneLoads = function() {
      var targets;
      this.onDoneRenderDistance();
      SortableStationSetView.__super__.onDoneLoads.call(this);
      targets = _.filter(this.collection.models, (function(_this) {
        return function(model) {
          var distance;
          distance = model.get(_this.sortFieldName);
          if (distance) {
            if ((_this.selectRangeFrom * 1000 <= distance && distance <= _this.selectRangeTo * 1000)) {
              return true;
            }
          }
          return false;
        };
      })(this));
      if (targets.length === 0) {
        return tp.alert("徒歩ルートで" + this.selectRangeTo + "km以内にステーションが見つかりませんでした。");
      }
    };

    SortableStationSetView.prototype.onClickNextSta = function(event) {
      if ($(event.currentTarget).attr("disabled") !== "disabled") {
        return this.trigger("addStations", this.addDivs());
      }
    };

    return SortableStationSetView;

  })(StationSetMapBaseView);

  tp.SortableRouteStationSetView = (function(superClass) {
    extend(SortableRouteStationSetView, superClass);

    function SortableRouteStationSetView() {
      return SortableRouteStationSetView.__super__.constructor.apply(this, arguments);
    }

    SortableRouteStationSetView.prototype.sortFieldName = "distanceW";

    return SortableRouteStationSetView;

  })(tp.SortableStationSetView);

  tp.atwith = function(parent, ctx, prefix) {
    if (prefix == null) {
      prefix = "";
    }
    return $.each(parent, (function(_this) {
      return function(key, value) {
        return ctx[prefix + key] = value;
      };
    })(this));
  };

  tp.alert = function(text) {
    var templateDialog;
    templateDialog = _.template("<div>\n  <!-- <div class=\"dialogTitle\"><%= title %></div> -->\n  <i class=\"icon-remove\" style=\"float: right;cursor: pointer;\"></i>\n  <div class=\"dialogContent\">\n    <i class=\"icon-warning-sign\" style=\"float:left;margin-right:4px\"></i>\n    <div style=\"overflow:auto\"><%= content %></div>\n  </div>\n  <div class=\"buttons\">\n    <button class=\"buttonYes\">OK</button>\n  </div>\n</div>");
    $("#dialog").html(templateDialog({
      title: "",
      content: text
    }));
    $.facybox({
      div: "#dialog"
    });
    return $("#facybox").draggable({
      handle: "div.dialogTitle",
      cursor: "move"
    }).find("button,i.icon-remove").on("click", function() {
      return $(document).trigger("close.facybox");
    });
  };


  /* const */

  tp.ptAdjust = 0.0032;


  /* end const */

  MarkerBaseView = Backbone.View.extend({
    initialize: function() {
      this.model.on({
        "change:contents": this.renderMarker,
        "change:selected": this.renderSelectedIcon,
        "change:disabled": this.onChangeDisabled,
        "remove": this.onRemove
      }, this);
      this.model.collection.on({
        "clearRoute": this.onClearRoute,
        "selectStation": this.onSelectStation,
        "hoverStation": this.onHoverStation,
        "closeInfoWindow": this.onCloseInfoWindow
      }, this);
      return this.icon = {
        norm: new google.maps.MarkerImage("images/marker_car_sprite.png", new google.maps.Size(32, 37), new google.maps.Point(164, 0)),
        hover: new google.maps.MarkerImage("images/marker_car_sprite.png", new google.maps.Size(32, 37), new google.maps.Point(246, 0)),
        sel: new google.maps.MarkerImage("images/marker_car_sprite.png", new google.maps.Size(32, 37), new google.maps.Point(0, 0)),
        sel_hover: new google.maps.MarkerImage("images/marker_car_sprite.png", new google.maps.Size(32, 37), new google.maps.Point(82, 0))
      };
    },

    /* on Model event */
    renderMarker: function() {
      var content;
      this.marker = new google.maps.Marker({
        map: this.options.map,
        position: this.model.get("latlng"),
        title: this.model.get("alias"),
        icon: this.icon.norm,
        visible: !this.model.get("disabled")
      });
      google.maps.event.addListener(this.marker, "click", (function(_this) {
        return function(event) {
          return _this.model.collection.trigger("selectStation", _this.model.id, "marker");
        };
      })(this));
      google.maps.event.addListener(this.marker, "mouseover", (function(_this) {
        return function() {
          return _this.model.collection.trigger("hoverStation", true, _this.model.id, "marker");
        };
      })(this));
      google.maps.event.addListener(this.marker, "mouseout", (function(_this) {
        return function() {
          return _this.model.collection.trigger("hoverStation", false, _this.model.id, "marker");
        };
      })(this));
      content = $(this.infoWindowTempl({
        title: this.model.get("alias")
      }));
      content.find("button.reserv").on("click", (function(_this) {
        return function() {
          return _this.model.trigger("requestReservePage");
        };
      })(this));
      content.find("button.svp").on("click", (function(_this) {
        return function() {
          return _this.trigger("requestStreetView", _this.model);
        };
      })(this));
      this.infowindow = new google.maps.InfoWindow({
        content: content[0]
      });
      return google.maps.event.addListener(this.marker, "rightclick", (function(_this) {
        return function() {
          _this.model.collection.trigger("closeInfoWindow", _this.model.id);
          _this.infowindow.open(_this.options.map, _this.marker);
          return _this.model.collection.trigger("selectStation", _this.model.id, "marker");
        };
      })(this));
    },
    renderSelectedIcon: function() {
      if (this.marker) {
        return this.marker.setIcon(this.model.get("selected") ? this.icon.sel : this.icon.norm);
      }
    },
    renderHoveredIcon: function() {
      if (this.marker) {
        return this.marker.setIcon((this.model.get("selected")) ? this.icon.sel_hover : this.icon.hover);
      }
    },
    onChangeDisabled: function() {
      if (this.marker) {
        return this.marker.setVisible(!this.model.get("disabled"));
      }
    },
    onChangeDistance: function() {
      return this.model.collection.trigger("doneRenderDistance");
    },
    onRemove: function() {
      google.maps.event.clearInstanceListeners(this.marker);
      this.marker.setMap(null);
      delete this.marker;
      this.infowindow.close();
      $(this.infowindow.content).find("button").off("click");
      delete this.infowindow;
      this.model.collection.off(null, null, this);
      this.off(null, null, null);
      return this.remove();
    },

    /* on Collection event */
    onClearRoute: function() {
      this.model.unset("distanceS");
      this.model.unset("distanceW");
      return this.model.unset("route");
    },
    onSelectStation: function(id, whichSelect) {
      if (id === this.model.id) {
        this.model.set({
          selected: true
        });
        this.marker.setIcon(this.icon.sel_hover);
        if (this.model.has("route")) {
          this.trigger("setDirections", this.model.get("route"));
        } else {
          this.trigger("setRoute", this.model, {
            direction: true
          });
        }
        if (whichSelect === "listItem") {
          return this.trigger("setCenter", this.model.get("latlng"));
        }
      } else {
        return this.model.set({
          selected: false
        });
      }
    },
    onHoverStation: function(hovered, id, whichSelect) {
      if (id === this.model.id) {
        if (hovered) {
          return this.renderHoveredIcon();
        } else {
          return this.renderSelectedIcon();
        }
      } else {
        return this.renderSelectedIcon();
      }
    },
    onCloseInfoWindow: function(scd) {
      if (scd !== this.model.id) {
        return this.infowindow.close();
      }
    },

    /* instance method */
    doneGetLatLngByScd: function(resp) {
      if (resp.status !== google.maps.GeocoderStatus.OK) {
        return this.alertFailure(resp.status);
      }
      return this.model.set({
        latlng: resp.latlng
      });
    },
    setRoute: function() {
      if (!(this.model.has("distanceS"))) {
        this.trigger("setDistanceS", this.model);
      }
      return this.trigger("setRoute", this.model);
    },
    infoWindowTempl: _.template("<div class=\"gmapinfownd\">\n  <h7 style=\"margin:0\"><%= title %></h7><br><br>\n  <button class=\"svp small\">ストリートビュー<i class=\"icon-zoom-in\"></i></button>\n  <button class=\"reserv small\">予約 »<i class=\"\"></i></button>\n<div>")
  });

  tp.MarkerWoRouteView = (function(superClass) {
    extend(MarkerWoRouteView, superClass);

    function MarkerWoRouteView() {
      return MarkerWoRouteView.__super__.constructor.apply(this, arguments);
    }

    MarkerWoRouteView.prototype.initialize = function(options) {
      MarkerWoRouteView.__super__.initialize.call(this, options);
      return this.model.on("change:distanceS", this.onChangeDistance, this);
    };

    MarkerWoRouteView.prototype.renderMarker = function() {
      if (this.marker) {
        if (!(this.model.has("distanceS"))) {
          this.trigger("setDistanceS", this.model);
        }
        return;
      } else {
        MarkerWoRouteView.__super__.renderMarker.call(this);
      }
      if (this.model.has("distanceS")) {
        return this.model.trigger("change:distanceS");
      } else {
        return this.trigger("setDistanceS", this.model);
      }
    };

    return MarkerWoRouteView;

  })(MarkerBaseView);

  tp.MarkerView = (function(superClass) {
    extend(MarkerView, superClass);

    function MarkerView() {
      return MarkerView.__super__.constructor.apply(this, arguments);
    }

    MarkerView.prototype.initialize = function(options) {
      MarkerView.__super__.initialize.call(this, options);
      return this.model.on("change:distanceW", this.onChangeDistance, this);
    };

    MarkerView.prototype.renderMarker = function() {
      if (this.marker) {
        if (!(this.model.has("route"))) {
          this.setRoute();
        }
        return;
      } else {
        MarkerView.__super__.renderMarker.call(this);
      }
      return this.setRoute();
    };

    return MarkerView;

  })(MarkerBaseView);

  tp.MapView = Backbone.View.extend({

    /* Backbone property */
    el: "#map_block",
    events: {
      "submit form.inputForm": "onChangeAddress",
      "click form.inputForm i.icon-search": "onChangeAddress",
      "focus form.inputForm input:text": "onFocusInput",
      "blur form.inputForm input:text": "onBlurInput"
    },
    initialize: function(options) {
      this.collection = options.collection, this.markerViewClassName = options.markerViewClassName, this.waitMSec = options.waitMSec, this.searchMargin = options.searchMargin, this.checkSearchRange = options.checkSearchRange, this.searchStations = options.searchStations;
      this.model.on({
        "change:address": this.changeCenterAddress
      }, this);
      this.collection.on({
        "add": this.onAddRender,
        "hideRoute": this.onHideRoute
      }, this);
      (this.dfdRenderGMap = $.Deferred()).promise();
      (this.dfdPresetStations = $.Deferred()).promise();
      (this.dfdWaitSearch = $.Deferred()).promise();
      return tp.atwith(tp.activity.misc, this);
    },

    /* instance method */
    reset: function(options) {
      this.setDirectionWaitIcon(false);
      this.setDirectionWaitIcon(true);
      this.model.off(null, null, this);
      this.initialize(options);
      this.dfdRenderGMap.resolve();
      return this;
    },
    render: function() {
      var address;
      (this.dfdPresetStations = $.Deferred()).promise();
      this.$el.html(this.template);
      this.$("#address").val(tp.activity.misc.centerAddress);
      this.geocoder = new google.maps.Geocoder();
      if ((address = tp.activity.misc.centerAddress)) {
        this.getLatLngByAddress(address).done((function(_this) {
          return function(latlng) {
            return _this.renderGMap({
              address: address,
              latlng: latlng
            });
          };
        })(this));
      } else {
        this.getAddressFromCurrentPos().done((function(_this) {
          return function(resp) {
            _this.$("#address").val(resp.address);
            return _this.renderGMap(resp);
          };
        })(this));
      }
      return this;
    },
    renderGMap: function(addressInfo) {
      this.model.set({
        address: addressInfo.address,
        latlng: addressInfo.latlng
      }, {
        silent: true
      });
      this.map = new google.maps.Map(this.$("#map_canvas")[0], {
        zoom: 15,
        center: this.model.get("latlng"),
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        scaleControl: true
      });
      this.directionsService = new google.maps.DirectionsService();
      this.directionsDisplay = new google.maps.DirectionsRenderer({
        draggable: true,
        preserveViewport: true,
        suppressMarkers: true,
        suppressInfoWindows: true
      });
      this.directionsDisplay.setMap(this.map);
      google.maps.event.addListener(this.directionsDisplay, "directions_changed", (function(_this) {
        return function() {
          var directionsResult, distance, model, route;
          if (_this.directionsDisplay.directions.modelId) {
            return;
          }
          if ((model = _this.collection.where({
            selected: true
          })[0])) {
            directionsResult = _this.directionsDisplay.getDirections();
            route = directionsResult.routes[0];
            distance = 0;
            $.each(route.legs, function(i, leg) {
              return distance += leg.distance.value;
            });
            directionsResult.modelId = model.id;
            return model.set({
              route: directionsResult,
              distanceW: Math.round(distance * 1000) / 1000
            });
          }
        };
      })(this));
      this.renderCenterMarker();
      return this.dfdRenderGMap.resolve();
    },
    renderCenterMarker: function() {
      if (this.markerAddress) {
        this.markerAddress.setMap(null);
      }
      this.markerAddress = new google.maps.Marker({
        map: this.map,
        position: this.model.get("latlng"),
        title: this.model.get("address"),
        draggable: true
      });
      this.map.panTo(this.model.get("latlng"));
      google.maps.event.addListener(this.markerAddress, "dblclick", (function(_this) {
        return function() {
          var model;
          model = _this.collection.where({
            selected: true
          })[0];
          return _this.onSetRoute(model, {
            direction: true
          });
        };
      })(this));
      google.maps.event.addListener(this.markerAddress, "dragstart", (function(_this) {
        return function() {
          return _this.onHideRoute();
        };
      })(this));
      return google.maps.event.addListener(this.markerAddress, "dragend", (function(_this) {
        return function() {
          return _this.changeAddressByLatLng(_this.markerAddress.position);
        };
      })(this));
    },
    changeAddressByLatLng: function(latLng) {
      return this.geocoder.geocode({
        location: latLng
      }, (function(_this) {
        return function(results, status) {
          var newAddress;
          if (status === google.maps.GeocoderStatus.OK && results[0]) {
            newAddress = results[0].formatted_address;
            _this.markerAddress.setOptions({
              title: newAddress
            });
            _this.model.set({
              address: newAddress,
              latlng: _this.markerAddress.position
            }, {
              silent: true
            });
            return _this.changeAddress(newAddress);
          }
        };
      })(this));
    },
    presetStations: function() {
      this.onHideRoute();
      if (!(this.dfdPresetStations.state() === "pending")) {
        (this.dfdPresetStations = $.Deferred()).promise();
      }
      return $.when(this.searchStations()).done((function(_this) {
        return function() {
          return _this.dfdPresetStations.resolve();
        };
      })(this)).fail((function(_this) {
        return function(error) {
          _this.dfdPresetStations.reject();
          _this.setDirectionWaitIcon(false);
          return tp.alert(error);
        };
      })(this));
    },
    getLatLngByAddress: function(address) {
      var dfd;
      dfd = $.Deferred();
      this.geocoder.geocode({
        address: address
      }, (function(_this) {
        return function(results, status) {
          var latlng;
          if (status === google.maps.GeocoderStatus.OK) {
            latlng = results[0].geometry.location;
            return dfd.resolve(latlng);
          } else {
            _this.alertFailure(status);
            return dfd.reject();
          }
        };
      })(this));
      return dfd.promise();
    },
    getAddressFromCurrentPos: function() {
      var dfd;
      dfd = $.Deferred();
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition((function(_this) {
          return function(position) {
            var latlng;
            latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            return _this.geocoder.geocode({
              location: latlng
            }, function(results, status) {
              var address;
              if (status === google.maps.GeocoderStatus.OK) {
                address = results[0].formatted_address;
                return dfd.resolve({
                  latlng: latlng,
                  address: address
                });
              } else {
                _this.alertFailure(status);
                return dfd.reject();
              }
            });
          };
        })(this), function(error) {
          var msg;
          switch (error.code) {
            case error.TIMEOUT:
              msg = "タイムアウトで<br>";
              break;
            case error.POSITION_UNAVAILABLE:
              msg = "";
              break;
            case error.PERMISSION_DENIED:
              msg = "アクセス許可の問題で<br>";
              break;
            case error.UNKNOWN_ERROR:
              msg = "不明なエラーで<br>";
          }
          tp.alert(msg + "現在地が取得できませんでした。<br>住所を指定して検索してください。");
          return dfd.reject();
        });
      } else {
        tp.alert("ご使用のブラウザでは現在地情報が取得できません。<br>住所を指定して検索してください。");
        dfd.reject();
      }
      return dfd.promise();
    },
    resetCenter: function() {
      google.maps.event.trigger(this.map, "resize");
      return this.map.panTo(this.markerAddress.position);
    },
    addStations: function(addCount) {
      if (this.shiftSearchedStations(addCount - this.selectListMax)) {
        this.setDirectionWaitIcon(true);
        return this.trigger("addStations");
      }
    },
    alertFailure: function(status, option) {
      if (option == null) {
        option = "";
      }
      tp.alert("Google-Geocodeは指定住所を取得できませんでした。" + option + "<br><br>エラーコード: " + status);
      return false;
    },
    getStraightDistance: function(latlngFrom, latLngTo) {
      var a, diffLat, diffLng, distance, earth_radius, radianLat1, radianLat2, radianLng1, radianLng2, sinLat, sinLng;
      radianLat1 = latlngFrom.lat() * (Math.PI / 180);
      radianLng1 = latlngFrom.lng() * (Math.PI / 180);
      radianLat2 = latLngTo.lat() * (Math.PI / 180);
      radianLng2 = latLngTo.lng() * (Math.PI / 180);
      diffLat = radianLat1 - radianLat2;
      diffLng = radianLng1 - radianLng2;
      sinLat = Math.sin(diffLat / 2);
      sinLng = Math.sin(diffLng / 2);
      a = Math.pow(sinLat, 2.0) + Math.cos(radianLat1) * Math.cos(radianLat2) * Math.pow(sinLng, 2.0);
      earth_radius = 6378.1;
      return distance = earth_radius * 2 * Math.asin(Math.min(1, Math.sqrt(a)));
    },
    changeAddress: function(newAddress) {
      if (newAddress) {
        this.$("#address").val(newAddress);
      }
      tp.activity.misc.centerAddress = this.model.get("address");
      tp.activity.misc.latlng = this.model.get("latlng");
      this.map.panTo(tp.activity.misc.latlng);
      this.collection.trigger("selectStation", {
        id: null
      });
      this.collection.trigger("clearRoute");
      this.setDirectionWaitIcon(true);
      this.presetStations();
      return this.trigger("changeAddress");
    },
    sendCenterLatLng: function(container) {
      return container.latlng = this.model.get("latlng");
    },
    sendDfdWaitSearch: function(container) {
      return container.dfdWaitSearch = this.dfdWaitSearch;
    },

    /* on Model event */
    changeCenterAddress: function() {
      var address;
      return this.getLatLngByAddress(address = this.model.get("address")).done((function(_this) {
        return function(latlng) {
          _this.markerAddress.setOptions({
            title: address,
            position: latlng
          });
          _this.model.set({
            latlng: latlng
          });
          return _this.changeAddress();
        };
      })(this));
    },

    /* on Collection event */
    onHideRoute: function(route) {
      if (this.markerAddress && (!route || (this.directionsDisplay.directions === route))) {
        if (this.zeroDirections) {
          return this.directionsDisplay.setDirections(this.zeroDirections);
        } else {
          return this.directionsService.route({
            origin: this.markerAddress.position,
            destination: this.markerAddress.position,
            travelMode: google.maps.DirectionsTravelMode.WALKING
          }, (function(_this) {
            return function(resp, status) {
              if (status === google.maps.DirectionsStatus.OK) {
                _this.directionsDisplay.setDirections(resp);
                return _this.zeroDirections = resp;
              }
            };
          })(this));
        }
      }
    },
    onDoneLoads: function(options) {
      google.maps.event.trigger(this.map, "resize");
      if (options != null ? options.changeTimetable : void 0) {
        return this.setDirectionWaitIcon(false);
      } else {
        return setTimeout(((function(_this) {
          return function() {
            return _this.setDirectionWaitIcon(false);
          };
        })(this)), this.waitMSec);
      }
    },
    onAddRender: function(model, collection, options) {
      var markerView;
      markerView = new tp[this.markerViewClassName]({
        model: model,
        map: this.map
      });
      return markerView.on({
        "setDistanceS": this.onSetDistanceS,
        "setRoute": this.onSetRoute,
        "setDirections": this.onSetDirections,
        "setCenter": this.onSetCenter,
        "requestStreetView": this.onRequestStreetView
      }, this);
    },
    setDirectionWaitIcon: function(enable) {
      var j, k, ref, ref1, ref2, rules, style, styleSheets;
      if (enable) {
        (this.dfdWaitSearch = $.Deferred()).promise();
      } else {
        this.dfdWaitSearch.resolve();
      }
      if (((ref = this.divMarker) != null ? ref.length : void 0) > 0) {
        if (enable) {
          this.imgMarker.hide();
          this.divMarker.addClass("searching");
          this.$("form, input, i").addClass("disabled");
          return this.$("form.inputForm input").attr("disabled", "disabled");
        } else {
          this.imgMarker.show();
          this.divMarker.removeClass("searching");
          this.$("form, input, i").removeClass("disabled");
          this.$("form.inputForm input").removeAttr("disabled");
          return this.trigger("readyNextStation");
        }
      } else {
        this.$("form, input, i").removeClass("disabled");
        this.$("form.inputForm input").removeAttr("disabled");
        styleSheets = Array.from(document.styleSheets).filter(function(styleSheet) {
          return !styleSheet.href || styleSheet.href.startsWith(window.location.origin);
        });
        for (style in styleSheets) {
          if ((style instanceof CSSStyleSheet) && style.cssRules) {
            if (rules = style.cssRules) {
              for (j = k = ref1 = rules.length - 1; ref1 <= 0 ? k <= 0 : k >= 0; j = ref1 <= 0 ? ++k : --k) {
                switch ((ref2 = rules[j]) != null ? ref2.selectorText : void 0) {
                  case "#map_canvas div.gmnoprint:first-child:not([controlwidth])":
                  case 'div.gmnoprint img[src$="marker_sprite.png"]':
                    style.deleteRule(j);
                }
              }
            }
          }
        }
        this.divMarker = $("#map_canvas div.gmnoprint:has(img[src$='marker_sprite.png'])");
        this.imgMarker = $("#map_canvas div.gmnoprint img[src$='marker_sprite.png']").show();
        return this.trigger("readyNextStation");
      }
    },

    /* on MarkerView event */
    onSetDistanceS: function(model) {
      var distanceS;
      distanceS = Math.round(this.getStraightDistance(this.markerAddress.position, model.get("latlng")) * 1000);
      return model.set({
        distanceS: distanceS
      });
    },
    onSetRoute: function(model, option, loops) {
      var request, traveMode;
      if (loops == null) {
        loops = 1;
      }
      traveMode = "WALKING";
      request = {
        origin: this.markerAddress.position,
        destination: model.get("latlng"),
        optimizeWaypoints: true,
        travelMode: google.maps.DirectionsTravelMode[traveMode],
        unitSystem: google.maps.DirectionsUnitSystem.METRIC
      };
      return this.directionsService.route(request, (function(_this) {
        return function(resp, status) {
          var distance, route;
          if (status === google.maps.DirectionsStatus.OK) {
            route = resp.routes[0];
            distance = 0;
            $.each(route.legs, function(i, leg) {
              return distance += leg.distance.value;
            });
            resp.modelId = model.id;
            model.set({
              route: resp,
              distanceW: Math.round(distance * 1000) / 1000
            });
            if ((option != null ? option.direction : void 0)) {
              return _this.onSetDirections(resp);
            }
          } else if (status === google.maps.DirectionsStatus.OVER_QUERY_LIMIT) {
            console.log((model.get('name')) + " Retry: " + loops);
            if (loops++ > _this.mapRouteRetryTimes) {
              model.get("deferred").resolve();
              return tp.alert("'" + (model.get('alias')) + "'の新しいルートを検出できませんでした。<br>\n検索順位は正しくありません。<br><br>\n再試行回数: " + loops + "<br>\nエラーコード: " + status);
            } else {
              return setTimeout((function() {
                return _this.onSetRoute(model, option, loops);
              }), _this.mapRouteWaitMSec);
            }
          } else {
            return tp.alert("Google Maps APIは新しいルートを検出できませんでした。<br><br>" + "エラーコード: " + status);
          }
        };
      })(this));
    },
    onSetDirections: function(route) {
      return this.directionsDisplay.setDirections(route);
    },
    onSetCenter: function(latlng) {
      return this.map.panTo(latlng);
    },
    onRequestStreetView: function(model) {
      if (!this.svp) {
        this.svp = this.map.getStreetView();
      }
      this.svp.setPosition(model.get("latlng"));
      return this.svp.setVisible(true);
    },

    /* on DOM event */
    onChangeAddress: function(event) {
      var address;
      if ($(event.currentTarget).hasClass("disabled")) {
        return;
      }
      address = this.$("#address").val();
      if (address) {
        this.model.set({
          address: address
        });
      } else {
        this.getAddressFromCurrentPos().done((function(_this) {
          return function(resp) {
            _this.markerAddress.setOptions({
              title: resp.address,
              position: resp.latlng
            });
            _this.model.set({
              address: resp.address,
              latlng: resp.latlng
            }, {
              silent: true
            });
            return _this.changeAddress(resp.address);
          };
        })(this));
      }
      return false;
    },
    onFocusInput: function() {
      return this.$("form.inputForm").addClass("focus");
    },
    onBlurInput: function() {
      return this.$("form.inputForm").removeClass("focus");
    },

    /* property */
    template: "<div class=\"divInputAddress\">\n  <form class=\"inputForm disabled\">\n    <i class=\"icon-search disabled\"></i>\n    <input id=\"address\" type=\"text\" disabled=\"disabled\" placeholder=\"現在地\">\n  </form>\n</div>\n<div id=\"map_canvas\">\n  <div style=\"padding-top: 240px;\">地図を検索しています。<img src=\"images/loading2.gif\"></div>\n</div>"
  });

  tp.setFavStationLatLngs = function() {
    var container, dfd, dfdQueries, fixedStations, getLatLngByScd;
    getLatLngByScd = function(station) {
      var dfd;
      dfd = $.Deferred();
      $.getJSON("https://share.timescar.jp/view/station/teeda.ajax", {
        time: (new Date()).toString(),
        scd: station.scd,
        component: "station_detailPage",
        action: "ajaxScdSearch"
      }).done(function(resp) {
        station.latlng = new google.maps.LatLng(resp.jsonLat * 1 + tp.ptAdjust, resp.jsonLon * 1 - tp.ptAdjust);
        return dfd.resolve();
      });
      return dfd.promise();
    };
    dfd = $.Deferred();
    fixedStations = [];
    this.trigger("getLocalDB", container = {});
    $.each(tp.activity.favs, function(i, station) {
      if (station.checked) {
        return fixedStations.push(station);
      }
    });
    dfdQueries = $.Deferred().resolve();
    $.each(fixedStations, (function(_this) {
      return function(i, station) {
        var key, laln, latlng, ref;
        if ((latlng = (ref = container.localDB[station.scd]) != null ? ref.latlng : void 0)) {
          laln = [];
          for (key in latlng) {
            laln.push(latlng[key]);
          }
          return station.latlng = new google.maps.LatLng(latlng.hb || laln[0], latlng.ib || laln[1]);
        } else {
          return dfdQueries = dfdQueries.then(function() {
            return getLatLngByScd(station);
          });
        }
      };
    })(this));
    dfdQueries.done((function(_this) {
      return function() {
        _this.trigger("sendStations", fixedStations);
        return dfd.resolve();
      };
    })(this));
    if (dfd.state() === "pending") {
      return dfd.promise();
    }
  };


  /* for MapView class prototype */

  tp.checkSearchRangeS = function(distance) {
    return (this.selectRangeFrom <= distance && distance <= this.selectRangeTo);
  };

  tp.checkSearchRangeW = function(distance) {
    return distance <= this.selectRangeTo;
  };

  tp.searchStations = function() {
    var area3kLat, area3kLng, dfd, latlng;
    dfd = $.Deferred();
    latlng = this.model.get("latlng");
    area3kLat = 0.028;
    area3kLng = 0.035;
    $.getJSON("https://share.timescar.jp/view/station/teeda.ajax", {
      time: (new Date()).toString(),
      minlat: Math.round((latlng.lat() - area3kLat - tp.ptAdjust) * 1000000) / 1000000,
      maxlat: Math.round((latlng.lat() + area3kLat - tp.ptAdjust) * 1000000) / 1000000,
      minlon: Math.round((latlng.lng() - area3kLng + tp.ptAdjust) * 10000000) / 10000000,
      maxlon: Math.round((latlng.lng() + area3kLng + tp.ptAdjust) * 10000000) / 10000000,
      component: "station_stationMapPage",
      action: "ajaxViewMap"
    }).done((function(_this) {
      return function(json) {
        var date, sDate;
        json.s.shift();
        if (json.s.length > 0) {
          date = new Date;
          date.setMilliseconds(0);
          date.setSeconds(0);
          date.setMinutes(0);
          sDate = date.getTime();
          return $.get("https://share.timescar.jp/view/station/stationMap.jsp", {
            sDate: sDate,
            eDate: sDate,
            scd: json.s[0].cd
          }).done(function() {
            return _this.postCheckSearchStations(json.s, latlng, dfd);
          }).fail(function(jqXHR, textStatus) {
            return dfd.reject("Request failed: " + textStatus);
          });
        } else {
          return dfd.reject("現在地付近にステーションが見つかりませんでした。");
        }
      };
    })(this)).fail((function(_this) {
      return function(jqXHR, textStatus) {
        return dfd.reject("Request failed: " + textStatus);
      };
    })(this));
    return dfd.promise();
  };

  tp.MapView.prototype.postCheckSearchStations = function(siteItems, latlng, dfd) {
    this.searchedStations = [];
    $.each(siteItems, (function(_this) {
      return function(i, station) {
        var distance, newLatlng;
        newLatlng = {
          lat: function() {
            return station.la * 1 + tp.ptAdjust;
          },
          lng: function() {
            return station.lo * 1 - tp.ptAdjust;
          }
        };
        if (_this.checkSearchRange(distance = _this.getStraightDistance(latlng, newLatlng))) {
          station.distanceS = distance;
          station.latlng = newLatlng;
          return _this.searchedStations.push(station);
        }
      };
    })(this));
    if (this.searchedStations.length === 0) {
      dfd.reject("半径" + this.selectRangeTo + "km圏内にステーションが見つかりませんでした。");
      return;
    }
    this.searchedStations.sort(function(a, b) {
      return a.distanceS - b.distanceS;
    });
    return this.shiftSearchedStations(this.searchMargin, dfd);
  };

  tp.MapView.prototype.shiftSearchedStations = function(searchMargin, dfd) {
    var fixedStations;
    fixedStations = [];
    $.each(this.searchedStations, (function(_this) {
      return function(i, station) {
        if (i < ~~_this.selectListMax + searchMargin) {
          fixedStations.push({
            scd: station.cd,
            latlng: new google.maps.LatLng(station.latlng.lat(), station.latlng.lng()),
            distanceS: Math.round(station.distanceS * 1000),
            checked: true
          });
          return station.reject = true;
        } else {
          return false;
        }
      };
    })(this));
    this.searchedStations = _.reject(this.searchedStations, function(station) {
      return station.reject;
    });
    if (fixedStations.length === 0) {
      tp.alert("検索範囲のステーションがすべて検索されました。");
    }
    this.trigger("sendStations", fixedStations);
    if (dfd != null) {
      dfd.resolve();
    }
    return true;
  };

  WindowView = Backbone.View.extend({
    initialize: function(options) {
      var timer;
      $(window).on("resize", this.onResize.bind(this));
      $(window).on("unload", this.onWindowUnload.bind(this));
      return timer = false;
    },
    render: function() {
      $("#map_block").before($('<div id="stations_block"></div>'));
      return this;
    },

    /* on DOM event */
    onResize: function() {
      var timer;
      if (timer) {
        clearTimeout(timer);
      }
      return timer = setTimeout(((function(_this) {
        return function() {
          return _this.resizeContainer({
            resize: true
          });
        };
      })(this)), 200);
    },
    resizeContainer: function(options) {
      var divInputSelectHeight, formInputAddress, frameHeight, frameWidth, windowHeight;
      windowHeight = $(window).height();
      frameWidth = $("div.mainframe").width();
      frameHeight = $("div.mainframe").height();
      formInputAddress = $("#map_block form.inputForm").height();
      $("#map_canvas").height(windowHeight - formInputAddress - (windowHeight - frameHeight));
      divInputSelectHeight = $("#stations_block .divInputSelect").height();
      if (options != null ? options.resize : void 0) {
        return this.trigger("doneResizeContainer");
      }
    },
    onWindowUnload: function() {
      return this.trigger("windowUnload");
    }
  });


  /* コントローラー基底クラス（マップなし） */

  ControllerBase = Backbone.View.extend({
    initialize: function(options) {
      this.windowView = new WindowView().render();
      this.collection = new tp.StationCollection();
      this.stationSetView = new tp[options.stationSetViewClassName](_.extend({
        model: new tp.PlainModel(),
        collection: this.collection
      }, options));
      this.stationSetView.on("getSelectDateHour", this.onGetSelectDateHour, this).render();
      this.localDB = tp.getLocalDB();
      this.listener = this.chromeTabsMessageListener.bind(this);
      return chrome.runtime.onMessage.addListener(this.listener);
    },

    /* instance method */
    run: function() {
      $.each(this.stations, (function(_this) {
        return function(i, station) {
          var deferred, model, stationName;
          model = _this.collection.get(station.scd);
          if (!model) {
            if (!station.name) {
              stationName = _this.getStationName(station.scd);
              if (stationName) {
                station.name = stationName.name;
                station.alias = stationName.alias;
              } else {
                station.name = station.alias = "Station " + (i + 1);
              }
            }
            model = _this.collection.push(station);
          }
          model.set({
            deferred: deferred = $.Deferred()
          });
          return deferred.promise();
        };
      })(this));
      return this.startLoad();
    },
    startLoad: function(options) {
      if (!(options != null ? options.changeTimetable : void 0) && this.stations.length === 0) {
        this.trigger("doneLoads", options);
        return;
      }
      $.when.apply(null, this.collection.pluck("deferred")).done((function(_this) {
        return function() {
          return _this.trigger("doneLoads", options);
        };
      })(this)).fail((function(_this) {
        return function() {};
      })(this));
      return this.trigger("doneReadyLoads", options);
    },
    getStationName: function(scd) {
      if (this.localDB[scd]) {
        return {
          name: this.localDB[scd].name,
          alias: this.localDB[scd].alias || this.localDB[scd].name
        };
      }
    },
    onGetSelectDateHour: function(container) {
      return tp.getSelectDateHour(container);
    },
    chromeTabsMessageListener: function(message, sender, sendResponse) {
      var container;
      if (message === "requestStartTrigger") {
        this.trigger("requestSendDfdWait", container = {});
        return container.dfdWaitSearch.done(function() {
          return sendResponse("ok");
        });
      }
    },
    saveDB: function() {
      var container;
      this.trigger("getStationWidth", container = {});
      this.localDB.misc = _.extend(this.localDB.misc || {}, container);
      return tp.saveLocalDB(this.localDB.misc);
    },
    reset: function() {
      var model;
      this.saveDB();
      while (model = this.collection.at(0)) {
        this.collection.remove(model);
      }
      this.collection.off(null, null, null);
      delete this.mapView.collection;
      this.stationSetView.model.off(null, null, null);
      this.stationSetView.off(null, null, null);
      this.stationSetView.remove();
      this.windowView.off(null, null, null);
      this.windowView.remove();
      $(window).off("resize");
      $(window).off("unload");
      this.off(null, null, null);
      this.remove();
      chrome.runtime.onMessage.removeListener(this.listener);
      return tp.mapView[tp.activity.uid] = this.mapView.off(null, null, null);
    }
  });


  /* コントローラー基底クラス（マップあり） */

  ControllerMapBase = (function(superClass) {
    extend(ControllerMapBase, superClass);

    function ControllerMapBase(options) {
      var ref, ref1, ref2, ref3;
      ControllerMapBase.__super__.constructor.call(this, options);
      if (((ref = tp.mapView[tp.activity.uid]) != null ? (ref1 = ref.dfdPresetStations) != null ? ref1.state() : void 0 : void 0) === "resolved") {
        this.mapView = tp.mapView[tp.activity.uid].reset(_.extend({
          collection: this.collection
        }, options));
      } else {
        this.mapView = new tp.MapView(_.extend({
          model: new tp.PlainModel(),
          collection: this.collection
        }, options));
        this.mapView.render();
      }
      this.on("requestPrsetStations", this.mapView.presetStations, this.mapView);
      this.on("requestSendDfdWait", this.mapView.sendDfdWaitSearch, this.mapView);
      this.on("doneLoads", this.mapView.onDoneLoads, this.mapView);
      this.on("doneLoads", this.stationSetView.onDoneLoads, this.stationSetView);
      this.on("doneLoads", this.windowView.resizeContainer, this.windowView);
      this.on("doneReadyLoads", this.stationSetView.onDoneReadyLoads, this.stationSetView);
      this.on("setStationWidth", this.stationSetView.onSetStationWidth, this.stationSetView);
      this.on("getStationWidth", this.stationSetView.onGetStationWidth, this.stationSetView);
      this.stationSetView.on("changeTimetable", this.onChangeTimetable, this);
      this.stationSetView.on("getLocalDB", this.onGetLocalDB, this);
      this.stationSetView.on("updateLocalDB", this.onUpdateLocalDB, this);
      this.stationSetView.on("getCenterLatLng", this.mapView.sendCenterLatLng, this.mapView);
      this.stationSetView.on("setDirectionWaitIcon", this.mapView.setDirectionWaitIcon, this.mapView);
      this.stationSetView.on("doneDragSplitter", this.mapView.resetCenter, this.mapView);
      this.stationSetView.on("addStations", this.mapView.addStations, this.mapView);
      this.mapView.on("changeAddress", this.stationSetView.refreshDivs, this.stationSetView);
      this.mapView.on("changeAddress", this.run, this);
      this.mapView.on("addStations", this.run, this);
      this.mapView.on("getLocalDB", this.onGetLocalDB, this);
      this.mapView.on("sendStations", this.onSendStations, this);
      this.mapView.on("readyNextStation", this.stationSetView.enableNextSta, this.stationSetView);
      this.windowView.on("windowUnload", this.onWindowUnload, this);
      this.windowView.on("doneResizeContainer", this.mapView.resetCenter, this.mapView);
      this.stationSetView.collection.on("requestStartTrigger", this.mapView.sendDfdWaitSearch, this.mapView);
      this.trigger("setStationWidth", {
        tdPaddingEm: ((ref2 = this.localDB.misc) != null ? ref2.tdPaddingEm : void 0) || 0.2,
        divStationsWidth: ((ref3 = this.localDB.misc) != null ? ref3.divStationsWidth : void 0) || 483
      });
      this.mapView.dfdRenderGMap.done((function(_this) {
        return function() {
          return _this.trigger("requestPrsetStations");
        };
      })(this)).fail((function(_this) {
        return function() {
          return tp.alert("Google mapsを初期化できませんでした。");
        };
      })(this));
    }


    /* instance method */

    ControllerMapBase.prototype.run = function(options) {
      return this.mapView.dfdPresetStations.done((function(_this) {
        return function() {
          return ControllerMapBase.__super__.run.call(_this, options);
        };
      })(this));
    };

    ControllerMapBase.prototype.onSendStations = function(stations) {
      this.stations = stations;
    };

    ControllerMapBase.prototype.onChangeTimetable = function(options) {
      $.each(this.collection.models, (function(_this) {
        return function(i, model) {
          var deferred;
          if (!model.get("disabled") || _.find(_this.stations, function(station) {
            return station.scd === model.id;
          })) {
            model.set({
              deferred: deferred = $.Deferred()
            });
            return deferred.promise();
          }
        };
      })(this));
      return this.startLoad(options);
    };

    ControllerMapBase.prototype.onGetLocalDB = function(container) {
      return container.localDB = this.localDB;
    };

    ControllerMapBase.prototype.onUpdateLocalDB = function(scd, station) {
      return tp.setLocalDB(scd, this.localDB[scd] = station);
    };

    ControllerMapBase.prototype.onWindowUnload = function() {
      var ref;
      if ((ref = tp.mapView[tp.activity.uid]) != null) {
        ref.off(null, null, null);
      }
      tp.mapView[tp.activity.uid] = null;
      return this.saveDB();
    };

    return ControllerMapBase;

  })(ControllerBase);


  /* インスタンス化クラス */

  tp.FavNomapController = (function(superClass) {
    extend(FavNomapController, superClass);

    function FavNomapController(options) {
      FavNomapController.__super__.constructor.call(this, _.extend({
        stationViewClassName: "StationNomapView",
        stationSetViewClassName: "StationSetNomapView"
      }, options));
      this.stations = [];
      $.each(tp.activity.favs, (function(_this) {
        return function(i, station) {
          if (station.checked) {
            return _this.stations.push(station);
          }
        };
      })(this));
    }

    return FavNomapController;

  })(ControllerBase);

  tp.FavMapController = (function(superClass) {
    extend(FavMapController, superClass);

    function FavMapController(options) {
      FavMapController.__super__.constructor.call(this, _.extend({
        stationViewClassName: "SortableStationView",
        stationSetViewClassName: "StationSetView",
        markerViewClassName: "MarkerWoRouteView",
        waitMSec: 0,
        searchMargin: 0,
        searchStations: tp.setFavStationLatLngs
      }, options));
    }

    return FavMapController;

  })(ControllerMapBase);

  tp.SearchStaController = (function(superClass) {
    extend(SearchStaController, superClass);

    function SearchStaController(options) {
      SearchStaController.__super__.constructor.call(this, _.extend({
        stationViewClassName: "SortableStationView",
        stationSetViewClassName: "SortableStationSetView",
        markerViewClassName: "MarkerWoRouteView",
        waitMSec: 0,
        searchMargin: 0,
        checkSearchRange: tp.checkSearchRangeS,
        searchStations: tp.searchStations
      }, options));
    }

    return SearchStaController;

  })(ControllerMapBase);

  tp.SearchStaOrderWalkController = (function(superClass) {
    extend(SearchStaOrderWalkController, superClass);

    function SearchStaOrderWalkController(options) {
      SearchStaOrderWalkController.__super__.constructor.call(this, _.extend({
        stationViewClassName: "SortableRouteStationView",
        stationSetViewClassName: "SortableRouteStationSetView",
        markerViewClassName: "MarkerView",
        waitMSec: 0,
        searchMargin: 4,
        checkSearchRange: tp.checkSearchRangeW,
        searchStations: tp.searchStations
      }, options));
    }

    return SearchStaOrderWalkController;

  })(ControllerMapBase);

}).call(this);
